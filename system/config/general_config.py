#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema BORA - Configura√ß√µes Gerais
M√≥dulo para delays, imagens e configura√ß√µes b√°sicas
"""

import customtkinter as ctk
from .base_config import BaseConfig

class GeneralConfig(BaseConfig):
    """Configura√ß√µes gerais do sistema"""
    
    def __init__(self, parent_configurator):
        super().__init__(parent_configurator)
        self.delay_padrao_var = None
        self.delay_erro_var = None
        self.tamanho_img_var = None
    
    def create_tab(self, notebook: ctk.CTkTabview) -> ctk.CTkFrame:
        """Cria aba de configura√ß√µes gerais"""
        tab = notebook.add("‚öôÔ∏è Geral")
        
        # Scroll frame
        scroll_frame = ctk.CTkScrollableFrame(tab)
        scroll_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Se√ß√£o de Delays
        self._create_delay_section(scroll_frame)
        
        # Se√ß√£o de Imagens
        self._create_image_section(scroll_frame)
        
        return tab
    
    def _create_delay_section(self, parent):
        """Cria se√ß√£o de configura√ß√µes de tempo"""
        delay_frame = self.create_frame_with_title(parent, "Configura√ß√µes de Tempo", "‚è±Ô∏è")
        delay_frame.pack(fill="x", pady=5)
        
        # Delay padr√£o
        self.delay_padrao_var = ctk.DoubleVar(value=self.get_config_value("delay_padrao", 2.0))
        self.create_entry_row(delay_frame, "Delay Padr√£o (segundos):", self.delay_padrao_var)
        
        # Delay ap√≥s erro
        self.delay_erro_var = ctk.DoubleVar(value=self.get_config_value("delay_apos_erro", 5.0))
        self.create_entry_row(delay_frame, "Delay Ap√≥s Erro (segundos):", self.delay_erro_var)
        
        # Descri√ß√µes
        desc_frame = ctk.CTkFrame(delay_frame)
        desc_frame.pack(fill="x", padx=10, pady=5)
        
        desc_text = """Delays controlam a velocidade do scraping:
‚Ä¢ Delay Padr√£o: Tempo entre requisi√ß√µes normais
‚Ä¢ Delay Ap√≥s Erro: Tempo extra ap√≥s falhas de conex√£o"""
        
        ctk.CTkLabel(
            desc_frame,
            text=desc_text,
            font=ctk.CTkFont(size=11),
            justify="left"
        ).pack(padx=10, pady=5)
    
    def _create_image_section(self, parent):
        """Cria se√ß√£o de configura√ß√µes de imagem"""
        img_frame = self.create_frame_with_title(parent, "Configura√ß√µes de Imagem", "üñºÔ∏è")
        img_frame.pack(fill="x", pady=15)
        
        # Tamanho m√≠nimo
        self.tamanho_img_var = ctk.IntVar(value=self.get_config_value("tamanho_minimo_imagem", 1024))
        self.create_entry_row(img_frame, "Tamanho M√≠nimo (pixels):", self.tamanho_img_var)
        
        # Informa√ß√µes adicionais
        info_frame = ctk.CTkFrame(img_frame)
        info_frame.pack(fill="x", padx=10, pady=5)
        
        info_text = """Configura√ß√£o de qualidade de imagem:
‚Ä¢ Tamanho M√≠nimo: Imagens menores s√£o ignoradas
‚Ä¢ Recomendado: 1024px para boa qualidade"""
        
        ctk.CTkLabel(
            info_frame,
            text=info_text,
            font=ctk.CTkFont(size=11),
            justify="left"
        ).pack(padx=10, pady=5)
        
        # Bot√µes de preset
        preset_frame = ctk.CTkFrame(img_frame)
        preset_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(preset_frame, text="Presets R√°pidos:").pack(side="left", padx=5)
        
        presets = [
            ("Baixa (512px)", 512),
            ("M√©dia (1024px)", 1024),
            ("Alta (2048px)", 2048)
        ]
        
        for text, size in presets:
            ctk.CTkButton(
                preset_frame,
                text=text,
                command=lambda s=size: self._set_image_preset(s),
                width=100
            ).pack(side="right", padx=2)
    
    def _set_image_preset(self, size):
        """Define preset de tamanho de imagem"""
        self.tamanho_img_var.set(size)
        self.log_action(f"Preset de imagem definido: {size}px", "INFO", "üñºÔ∏è")
    
    def save_config(self) -> bool:
        """Salva configura√ß√µes gerais"""
        try:
            self.set_config_value("delay_padrao", self.delay_padrao_var.get())
            self.set_config_value("delay_apos_erro", self.delay_erro_var.get())
            self.set_config_value("tamanho_minimo_imagem", self.tamanho_img_var.get())
            return True
        except Exception as e:
            self.log_action(f"Erro ao salvar configura√ß√µes gerais: {str(e)}", "ERROR", "‚ùå")
            return False